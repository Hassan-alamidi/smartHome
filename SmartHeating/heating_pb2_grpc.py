# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import heating_pb2 as heating__pb2


class HeatingServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getSystemTempSetting = channel.unary_unary(
        '/HeatingService/getSystemTempSetting',
        request_serializer=heating__pb2.Empty.SerializeToString,
        response_deserializer=heating__pb2.IntResponse.FromString,
        )
    self.changeSystemTempSettings = channel.unary_unary(
        '/HeatingService/changeSystemTempSettings',
        request_serializer=heating__pb2.IntRequest.SerializeToString,
        response_deserializer=heating__pb2.StringResponse.FromString,
        )
    self.toggleHeatingSystemStatus = channel.unary_unary(
        '/HeatingService/toggleHeatingSystemStatus',
        request_serializer=heating__pb2.Empty.SerializeToString,
        response_deserializer=heating__pb2.StringResponse.FromString,
        )


class HeatingServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def getSystemTempSetting(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def changeSystemTempSettings(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def toggleHeatingSystemStatus(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_HeatingServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getSystemTempSetting': grpc.unary_unary_rpc_method_handler(
          servicer.getSystemTempSetting,
          request_deserializer=heating__pb2.Empty.FromString,
          response_serializer=heating__pb2.IntResponse.SerializeToString,
      ),
      'changeSystemTempSettings': grpc.unary_unary_rpc_method_handler(
          servicer.changeSystemTempSettings,
          request_deserializer=heating__pb2.IntRequest.FromString,
          response_serializer=heating__pb2.StringResponse.SerializeToString,
      ),
      'toggleHeatingSystemStatus': grpc.unary_unary_rpc_method_handler(
          servicer.toggleHeatingSystemStatus,
          request_deserializer=heating__pb2.Empty.FromString,
          response_serializer=heating__pb2.StringResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'HeatingService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
